import os
import asyncio
import websockets
from RealtimeTTS import GTTSEngine, TextToAudioStream
import re

# Kh·ªüi t·∫°o OpenAI TTS Engine
engine = GTTSEngine(
    voice="vi",
)

def run_async(coro):
    """Ch·∫°y m·ªôt coroutine trong event loop ch√≠nh"""
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        asyncio.create_task(coro)  # N·∫øu event loop ƒëang ch·∫°y, d√πng create_task
    else:
        asyncio.run(coro)  # N·∫øu kh√¥ng c√≥ event loop, ch·∫°y coroutine ngay l·∫≠p t·ª©c

async def handle_client(websocket, path=None):
    text_buffer = []
    BUFFER_THRESHOLD = 15  # Gom ƒë·ªß 15 k√Ω t·ª± tr∆∞·ªõc khi feed
    
    async def notify_client_start():
        print(f"AUDIO_START")
        await websocket.send("AUDIO_START")  # D√πng k·∫øt n·ªëi hi·ªán t·∫°i ƒë·ªÉ g·ª≠i

    async def notify_client_stop():
        print(f"AUDIO_STOP")
        await websocket.send("AUDIO_STOP")  # D√πng k·∫øt n·ªëi hi·ªán t·∫°i ƒë·ªÉ g·ª≠i

    # G√°n callback cho stream
    stream = TextToAudioStream(
        engine=engine,
        language="vi",
        on_audio_stream_start=lambda: run_async(notify_client_start()),  # G·ªçi ƒë√∫ng c√°ch
        on_audio_stream_stop=lambda: run_async(notify_client_stop())     # G·ªçi ƒë√∫ng c√°ch
    )

    # üöÄ M·ªìi buffer b·∫±ng m·ªôt kho·∫£ng tr·∫Øng ƒë·ªÉ tr√°nh ng·∫Øt qu√£ng ƒë·∫ßu
    stream.feed([" "])  
    stream.play_async(
        buffer_threshold_seconds=0.2,  # TƒÉng buffer ƒë·ªÉ tr√°nh thi·∫øu d·ªØ li·ªáu khi ph√°t
        reset_generated_text=False,
        fast_sentence_fragment=True,
        fast_sentence_fragment_allsentences=True  # B·∫≠t cho to√†n b·ªô c√¢u ƒë·ªÉ ph√°t m∆∞·ª£t h∆°n
    )

    async for text_chunk in websocket:
        if text_chunk:
            text_chunk = re.sub(r'[*#]', '', text_chunk)
            text_buffer.append(text_chunk)

            # N·∫øu c√¢u c√≥ d·∫•u k·∫øt th√∫c ho·∫∑c ƒë·ªß d√†i, feed ngay l·∫≠p t·ª©c
            full_text = "".join(text_buffer)
            if full_text and (len(full_text) >= BUFFER_THRESHOLD or full_text[-1] in ".?!\n"):
                if not stream.is_playing():
                    stream.play_async(  # G·ªçi play tr∆∞·ªõc khi feed ƒë·ªÉ chu·∫©n b·ªã buffer
                        buffer_threshold_seconds=0.2,
                        reset_generated_text=False,
                        fast_sentence_fragment=True,
                        fast_sentence_fragment_allsentences=True
                    )

                stream.feed([full_text])  # ƒê·∫©y d·ªØ li·ªáu v√†o TTS
                text_buffer = []  # Reset buffer

                await asyncio.sleep(0.05)  # Ch·ªù ng·∫Øn h∆°n ƒë·ªÉ ph·∫£n h·ªìi nhanh h∆°n

async def main():
    """Kh·ªüi ch·∫°y WebSocket server"""
    start_server = await websockets.serve(handle_client, "localhost", 6789, ping_interval=None)
    print("‚úÖ WebSocket server running on ws://localhost:6789")
    await start_server.wait_closed()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.run(main())